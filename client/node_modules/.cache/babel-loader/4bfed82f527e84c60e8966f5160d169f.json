{"ast":null,"code":"var _jsxFileName = \"/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PalettesContext } from '../PalettesContext';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\nimport '../styles/PaletteGenerator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaletteGenerator = () => {\n  _s();\n\n  const {\n    addPalette\n  } = useContext(PalettesContext);\n  const [palette, setPalette] = useState(null);\n  const [paletteName, setPaletteName] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const generateNewColors = async () => {\n    const newColors = await Promise.all(palette.map(async color => {\n      if (!color.locked) {\n        color.color = await generateColor();\n        return color;\n      }\n\n      return color;\n    }));\n    return newColors;\n  };\n\n  const handleGenerateClick = async () => {\n    setIsGenerating(true);\n    const newColors = await generateNewColors();\n    setPalette(newColors);\n    setIsGenerating(false);\n  };\n\n  const handleSaveClick = e => {\n    e.preventDefault();\n    const paletteToSave = {\n      name: paletteName,\n      id: uuidv4(),\n      date: new Date().toLocaleString(),\n      colors: palette.map(color => color.color)\n    };\n    addPalette(paletteToSave);\n    setPaletteName('');\n  };\n\n  const toggleLocked = num => {\n    setPalette(palette.map(color => {\n      if (color.num === num) {\n        color.locked = !color.locked;\n        return color;\n      }\n\n      return color;\n    }));\n  };\n\n  useEffect(() => {\n    if (!palette) {\n      setIsGenerating(true);\n\n      async function generatePalette() {\n        const list = [];\n\n        for (let i = 0; i < 5; i++) {\n          const clr = {\n            num: i + 1,\n            color: await generateColor(),\n            locked: false\n          };\n          list.push(clr);\n        }\n\n        setPalette(list);\n        setIsGenerating(false);\n      }\n\n      generatePalette();\n    }\n  }, [palette]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"palette-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"palette-form\",\n      onSubmit: e => handleSaveClick(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"palette-form__input\",\n        type: \"text\",\n        maxLength: \"25\",\n        value: paletteName,\n        onChange: e => setPaletteName(e.target.value),\n        placeholder: \"Palette name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn save-btn\",\n        type: \"submit\",\n        value: \"Save\",\n        disabled: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"palette-grid\",\n      children: palette ? palette.map(color => /*#__PURE__*/_jsxDEV(ColorCell, {\n        color: color,\n        toggleLocked: toggleLocked\n      }, color.num, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this)) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn generate-btn\",\n      onClick: () => handleGenerateClick(),\n      disabled: isGenerating,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaletteGenerator, \"3Tw6Z4JiI+LyHlyAfnP125O2PZM=\");\n\n_c = PaletteGenerator;\nexport default PaletteGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaletteGenerator\");","map":{"version":3,"sources":["/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js"],"names":["React","useState","useEffect","useContext","v4","uuidv4","PalettesContext","generateColor","ColorCell","PaletteGenerator","addPalette","palette","setPalette","paletteName","setPaletteName","isGenerating","setIsGenerating","generateNewColors","newColors","Promise","all","map","color","locked","handleGenerateClick","handleSaveClick","e","preventDefault","paletteToSave","name","id","date","Date","toLocaleString","colors","toggleLocked","num","generatePalette","list","i","clr","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PalettesContext } from '../PalettesContext';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\nimport '../styles/PaletteGenerator.css';\n\nconst PaletteGenerator = () => {\n  const { addPalette } = useContext(PalettesContext);\n  const [palette, setPalette] = useState(null);\n  const [paletteName, setPaletteName] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const generateNewColors = async () => {\n    const newColors = await Promise.all(\n      palette.map(async color => {\n        if (!color.locked) {\n          color.color = await generateColor();\n          return color;\n        }\n\n        return color;\n      })\n    );\n    return newColors;\n  };\n\n  const handleGenerateClick = async () => {\n    setIsGenerating(true);\n    const newColors = await generateNewColors();\n\n    setPalette(newColors);\n    setIsGenerating(false);\n  };\n\n  const handleSaveClick = e => {\n    e.preventDefault();\n\n    const paletteToSave = {\n      name: paletteName,\n      id: uuidv4(),\n      date: new Date().toLocaleString(),\n      colors: palette.map(color => color.color),\n    };\n    addPalette(paletteToSave);\n    setPaletteName('');\n  };\n\n  const toggleLocked = num => {\n    setPalette(\n      palette.map(color => {\n        if (color.num === num) {\n          color.locked = !color.locked;\n          return color;\n        }\n        return color;\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (!palette) {\n      setIsGenerating(true);\n      async function generatePalette() {\n        const list = [];\n        for (let i = 0; i < 5; i++) {\n          const clr = {\n            num: i + 1,\n            color: await generateColor(),\n            locked: false,\n          };\n\n          list.push(clr);\n        }\n        setPalette(list);\n        setIsGenerating(false);\n      }\n      generatePalette();\n    }\n  }, [palette]);\n\n  return (\n    <section className='palette-generator'>\n      <form className='palette-form' onSubmit={e => handleSaveClick(e)}>\n        <input\n          className='palette-form__input'\n          type='text'\n          maxLength='25'\n          value={paletteName}\n          onChange={e => setPaletteName(e.target.value)}\n          placeholder='Palette name'\n          required\n        />\n        <input\n          className='btn save-btn'\n          type='submit'\n          value='Save'\n          disabled={isGenerating}\n        />\n      </form>\n      <div className='palette-grid'>\n        {palette\n          ? palette.map(color => (\n              <ColorCell\n                color={color}\n                toggleLocked={toggleLocked}\n                key={color.num}\n              />\n            ))\n          : ''}\n      </div>\n      <button\n        className='btn generate-btn'\n        onClick={() => handleGenerateClick()}\n        disabled={isGenerating}\n      >\n        Generate\n      </button>\n    </section>\n  );\n};\n\nexport default PaletteGenerator;\n"]},"metadata":{},"sourceType":"module"}