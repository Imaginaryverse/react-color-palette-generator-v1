{"ast":null,"code":"const hslToRgb = (h, s, l) => {\n  const hueToRgb = (x, y, t) => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return x + (y - x) * 6 * t;\n    if (t < 1 / 2) return y;\n    if (t < 2 / 3) return x + (y - x) * (2 / 3 - t) * 6;\n    return x;\n  };\n\n  let r, g, b;\n\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    let p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nconst hslToHex = (h, s, l) => {\n  l /= 100;\n  const a = s * Math.min(l, 1 - l) / 100;\n\n  const f = n => {\n    const k = (n + h / 30) % 12;\n    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color).toString(16).padStart(2, '0'); // convert to Hex and prefix \"0\" if needed\n  };\n\n  return `#${f(0)}${f(8)}${f(4)}`;\n};\n\nconst rgbToHex = rgbArr => {\n  const letters = {\n    10: 'A',\n    11: 'B',\n    12: 'C',\n    13: 'D',\n    14: 'E',\n    15: 'F'\n  };\n  let hex = '#';\n  rgbArr.forEach(val => {\n    if (val > 255) {\n      hex += 'FF';\n    } else if (val < 0) {\n      hex += '00';\n    } else {\n      const first = Math.floor(val / 16);\n      const second = (val / 16 - first) * 16;\n      hex += first < 10 ? `${first}` : first > 15 ? letters[15] : letters[first];\n      hex += second < 10 ? `${second}` : second > 15 ? letters[15] : letters[second];\n    }\n  });\n  return hex;\n};\n\nexport { hslToRgb, hslToHex, rgbToHex };","map":{"version":3,"sources":["/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/utils/colorConverter.js"],"names":["hslToRgb","h","s","l","hueToRgb","x","y","t","r","g","b","q","p","hslToHex","a","Math","min","f","n","k","color","max","round","toString","padStart","rgbToHex","rgbArr","letters","hex","forEach","val","first","floor","second"],"mappings":"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","sourcesContent":["const hslToRgb = (h, s, l) => {\n  const hueToRgb = (x, y, t) => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return x + (y - x) * 6 * t;\n    if (t < 1 / 2) return y;\n    if (t < 2 / 3) return x + (y - x) * (2 / 3 - t) * 6;\n    return x;\n  };\n\n  let r, g, b;\n\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    let p = 2 * l - q;\n\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nconst hslToHex = (h, s, l) => {\n  l /= 100;\n  const a = (s * Math.min(l, 1 - l)) / 100;\n  const f = n => {\n    const k = (n + h / 30) % 12;\n    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color)\n      .toString(16)\n      .padStart(2, '0'); // convert to Hex and prefix \"0\" if needed\n  };\n  return `#${f(0)}${f(8)}${f(4)}`;\n};\n\nconst rgbToHex = rgbArr => {\n  const letters = {\n    10: 'A',\n    11: 'B',\n    12: 'C',\n    13: 'D',\n    14: 'E',\n    15: 'F',\n  };\n\n  let hex = '#';\n\n  rgbArr.forEach(val => {\n    if (val > 255) {\n      hex += 'FF';\n    } else if (val < 0) {\n      hex += '00';\n    } else {\n      const first = Math.floor(val / 16);\n      const second = (val / 16 - first) * 16;\n\n      hex +=\n        first < 10 ? `${first}` : first > 15 ? letters[15] : letters[first];\n      hex +=\n        second < 10 ? `${second}` : second > 15 ? letters[15] : letters[second];\n    }\n  });\n\n  return hex;\n};\n\nexport { hslToRgb, hslToHex, rgbToHex };\n"]},"metadata":{},"sourceType":"module"}