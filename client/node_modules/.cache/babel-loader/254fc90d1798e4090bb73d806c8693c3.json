{"ast":null,"code":"var _jsxFileName = \"/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { PalettesContext } from '../PalettesContext';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaletteGenerator = () => {\n  _s();\n\n  const {\n    addPalette\n  } = useContext(PalettesContext);\n  const [palette, setPalette] = useState(null);\n\n  const generateNewColors = async () => {\n    const newColors = await Promise.all(palette.map(async color => {\n      if (!color.locked) {\n        color.color = await generateColor();\n        return color;\n      }\n\n      return color;\n    }));\n    return newColors;\n  };\n\n  const handleGenerateClick = async () => {\n    const newColors = await generateNewColors();\n    setPalette(newColors);\n  };\n\n  const handleSaveClick = () => {\n    console.log(palette);\n    const paletteToSave = {\n      name: 'paletteTitle',\n      id: 'uuid',\n      date: new Date().toLocaleString(),\n      colors: palette.map(color => color.color)\n    };\n    console.log(paletteToSave); // addPalette();\n  };\n\n  const toggleLocked = num => {\n    setPalette(palette.map(color => {\n      if (color.num === num) {\n        color.locked = !color.locked;\n        return color;\n      }\n\n      return color;\n    }));\n  };\n\n  useEffect(() => {\n    if (!palette) {\n      async function generatePalette() {\n        const list = [];\n\n        for (let i = 0; i < 5; i++) {\n          const clr = {\n            num: i + 1,\n            color: await generateColor(),\n            locked: false\n          };\n          list.push(clr);\n        }\n\n        setPalette(list);\n      }\n\n      generatePalette();\n    }\n  }, [palette]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"palette-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"palette-grid\",\n      children: palette ? palette.map(color => /*#__PURE__*/_jsxDEV(ColorCell, {\n        color: color,\n        toggleLocked: toggleLocked\n      }, color.num, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this)) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn generate-btn\",\n      onClick: () => handleGenerateClick(),\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleSaveClick(),\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaletteGenerator, \"Sjgu/oWvCRuJLoLY5tyiBdrekOY=\");\n\n_c = PaletteGenerator;\nexport default PaletteGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaletteGenerator\");","map":{"version":3,"sources":["/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js"],"names":["React","useState","useEffect","useContext","PalettesContext","generateColor","ColorCell","PaletteGenerator","addPalette","palette","setPalette","generateNewColors","newColors","Promise","all","map","color","locked","handleGenerateClick","handleSaveClick","console","log","paletteToSave","name","id","date","Date","toLocaleString","colors","toggleLocked","num","generatePalette","list","i","clr","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { PalettesContext } from '../PalettesContext';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\n\nconst PaletteGenerator = () => {\n  const { addPalette } = useContext(PalettesContext);\n  const [palette, setPalette] = useState(null);\n\n  const generateNewColors = async () => {\n    const newColors = await Promise.all(\n      palette.map(async color => {\n        if (!color.locked) {\n          color.color = await generateColor();\n          return color;\n        }\n\n        return color;\n      })\n    );\n\n    return newColors;\n  };\n\n  const handleGenerateClick = async () => {\n    const newColors = await generateNewColors();\n\n    setPalette(newColors);\n  };\n\n  const handleSaveClick = () => {\n    console.log(palette);\n\n    const paletteToSave = {\n      name: 'paletteTitle',\n      id: 'uuid',\n      date: new Date().toLocaleString(),\n      colors: palette.map(color => color.color),\n    };\n\n    console.log(paletteToSave);\n\n    // addPalette();\n  };\n\n  const toggleLocked = num => {\n    setPalette(\n      palette.map(color => {\n        if (color.num === num) {\n          color.locked = !color.locked;\n          return color;\n        }\n        return color;\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (!palette) {\n      async function generatePalette() {\n        const list = [];\n        for (let i = 0; i < 5; i++) {\n          const clr = {\n            num: i + 1,\n            color: await generateColor(),\n            locked: false,\n          };\n\n          list.push(clr);\n        }\n        setPalette(list);\n      }\n      generatePalette();\n    }\n  }, [palette]);\n\n  return (\n    <section className='palette-generator'>\n      <div className='palette-grid'>\n        {palette\n          ? palette.map(color => (\n              <ColorCell\n                color={color}\n                toggleLocked={toggleLocked}\n                key={color.num}\n              />\n            ))\n          : ''}\n      </div>\n      <button\n        className='btn generate-btn'\n        onClick={() => handleGenerateClick()}\n      >\n        Generate\n      </button>\n      <button onClick={() => handleSaveClick()}>Save</button>\n    </section>\n  );\n};\n\nexport default PaletteGenerator;\n"]},"metadata":{},"sourceType":"module"}