{"ast":null,"code":"var _jsxFileName = \"/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\n/* const initState = [\n  {\n    num: 1,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 2,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 3,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 4,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 5,\n    color: generateColor(),\n    locked: false,\n  },\n]; */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaletteGenerator = () => {\n  _s();\n\n  const [palette, setPalette] = useState(null);\n  /* const generateColors = () => {\n    setPalette(\n      palette.map(async color => {\n        if (!color.locked) {\n          color.color = await generateColor();\n          console.log(color);\n          return color;\n        }\n        return color;\n      })\n    );\n  }; */\n\n  const toggleLocked = num => {\n    setPalette(palette.map(color => {\n      if (color.num === num) {\n        color.locked = !color.locked;\n        return color;\n      }\n\n      return color;\n    }));\n  };\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"palette-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"palette-grid\",\n      children: palette.map(color => /*#__PURE__*/_jsxDEV(ColorCell, {\n        color: color,\n        toggleLocked: toggleLocked\n      }, color.num, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn generate-btn\"\n      /* onClick={() => generateColors()} */\n      ,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaletteGenerator, \"iDQnPZ7di/vDdub0pKW0BhNOqIc=\");\n\n_c = PaletteGenerator;\nexport default PaletteGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaletteGenerator\");","map":{"version":3,"sources":["/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/PaletteGenerator.js"],"names":["React","useState","useEffect","generateColor","ColorCell","PaletteGenerator","palette","setPalette","toggleLocked","num","map","color","locked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAMO,YAAY,GAAGC,GAAG,IAAI;AAC1BF,IAAAA,UAAU,CACRD,OAAO,CAACI,GAAR,CAAYC,KAAK,IAAI;AACnB,UAAIA,KAAK,CAACF,GAAN,KAAcA,GAAlB,EAAuB;AACrBE,QAAAA,KAAK,CAACC,MAAN,GAAe,CAACD,KAAK,CAACC,MAAtB;AACA,eAAOD,KAAP;AACD;;AACD,aAAOA,KAAP;AACD,KAND,CADQ,CAAV;AASD,GAVD;;AAYAT,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAAT;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,mBAAnB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGI,OAAO,CAACI,GAAR,CAAYC,KAAK,iBAChB,QAAC,SAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,YAAY,EAAEH;AAFhB,SAGOG,KAAK,CAACF,GAHb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AACE,MAAA,SAAS,EAAC;AAAmB;AAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAhDD;;GAAMJ,gB;;KAAAA,gB;AAkDN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport generateColor from '../utils/generateColor';\nimport ColorCell from './ColorCell';\n\n/* const initState = [\n  {\n    num: 1,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 2,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 3,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 4,\n    color: generateColor(),\n    locked: false,\n  },\n  {\n    num: 5,\n    color: generateColor(),\n    locked: false,\n  },\n]; */\n\nconst PaletteGenerator = () => {\n  const [palette, setPalette] = useState(null);\n\n  /* const generateColors = () => {\n    setPalette(\n      palette.map(async color => {\n        if (!color.locked) {\n          color.color = await generateColor();\n          console.log(color);\n          return color;\n        }\n        return color;\n      })\n    );\n  }; */\n\n  const toggleLocked = num => {\n    setPalette(\n      palette.map(color => {\n        if (color.num === num) {\n          color.locked = !color.locked;\n          return color;\n        }\n        return color;\n      })\n    );\n  };\n\n  useEffect(() => {}, []);\n\n  return (\n    <section className='palette-generator'>\n      <div className='palette-grid'>\n        {palette.map(color => (\n          <ColorCell\n            color={color}\n            toggleLocked={toggleLocked}\n            key={color.num}\n          />\n        ))}\n      </div>\n      <button\n        className='btn generate-btn' /* onClick={() => generateColors()} */\n      >\n        Generate\n      </button>\n    </section>\n  );\n};\n\nexport default PaletteGenerator;\n"]},"metadata":{},"sourceType":"module"}