{"ast":null,"code":"var _jsxFileName = \"/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/HarmonyGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PrimaryForm from './PrimaryForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomHue = () => Math.floor(Math.random() * 360);\n\nconst getRandomNum = () => Math.floor(Math.random() * 100);\n\nconst getPositiveCompHue = (hue, degrees) => {\n  // return hue + degrees > 360 ? hue + degrees - 360 : hue + degrees;\n  return hue + degrees;\n};\n\nconst formatHsl = (h, s, l) => {\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nconst HarmonyGenerator = () => {\n  _s();\n\n  const [primaryHue, setPrimaryHue] = useState(0);\n  const [primarySat, setPrimarySat] = useState(0);\n  const [primaryLum, setPrimaryLum] = useState(0);\n  const [primaryColor, setPrimaryColor] = useState({\n    h: 0,\n    s: 0,\n    l: 0\n  });\n\n  const handleInputChange = (e, name) => {\n    switch (name) {\n      case 'hue':\n        setPrimaryHue(e.target.value);\n        break;\n\n      case 'sat':\n        setPrimarySat(e.target.value);\n        break;\n\n      case 'lum':\n        setPrimaryLum(e.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    setPrimaryHue(getRandomHue());\n    setPrimarySat(getRandomNum());\n    setPrimaryLum(getRandomNum());\n  }, []);\n  useEffect(() => {\n    setPrimaryColor({\n      h: primaryHue,\n      s: primarySat,\n      l: primaryLum\n    });\n  }, [primaryHue, primarySat, primaryLum]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"harmony-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"primary-color-preview\",\n      style: {\n        backgroundColor: formatHsl(primaryHue, primarySat, primaryLum)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PrimaryForm, {\n      primaryHue: primaryHue,\n      primarySat: primarySat,\n      primaryLum: primaryLum,\n      handleInputChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Positive Comp Color A: \", getPositiveCompHue(primaryColor.h, 135)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarmonyGenerator, \"gWw15E57d/uYHmI3fyFZ2rDBuOM=\");\n\n_c = HarmonyGenerator;\nexport default HarmonyGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarmonyGenerator\");","map":{"version":3,"sources":["/Users/saltdev/Dev/react-color-palette-generator-v1/client/src/components/HarmonyGenerator.js"],"names":["React","useState","useEffect","PrimaryForm","getRandomHue","Math","floor","random","getRandomNum","getPositiveCompHue","hue","degrees","formatHsl","h","s","l","HarmonyGenerator","primaryHue","setPrimaryHue","primarySat","setPrimarySat","primaryLum","setPrimaryLum","primaryColor","setPrimaryColor","handleInputChange","e","name","target","value","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PrimaryForm from './PrimaryForm';\n\nconst getRandomHue = () => Math.floor(Math.random() * 360);\n\nconst getRandomNum = () => Math.floor(Math.random() * 100);\n\nconst getPositiveCompHue = (hue, degrees) => {\n  // return hue + degrees > 360 ? hue + degrees - 360 : hue + degrees;\n  return hue + degrees;\n};\n\nconst formatHsl = (h, s, l) => {\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nconst HarmonyGenerator = () => {\n  const [primaryHue, setPrimaryHue] = useState(0);\n  const [primarySat, setPrimarySat] = useState(0);\n  const [primaryLum, setPrimaryLum] = useState(0);\n  const [primaryColor, setPrimaryColor] = useState({ h: 0, s: 0, l: 0 });\n\n  const handleInputChange = (e, name) => {\n    switch (name) {\n      case 'hue':\n        setPrimaryHue(e.target.value);\n        break;\n      case 'sat':\n        setPrimarySat(e.target.value);\n        break;\n      case 'lum':\n        setPrimaryLum(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    setPrimaryHue(getRandomHue());\n    setPrimarySat(getRandomNum());\n    setPrimaryLum(getRandomNum());\n  }, []);\n\n  useEffect(() => {\n    setPrimaryColor({ h: primaryHue, s: primarySat, l: primaryLum });\n  }, [primaryHue, primarySat, primaryLum]);\n\n  return (\n    <section className='harmony-generator'>\n      <div\n        className='primary-color-preview'\n        style={{\n          backgroundColor: formatHsl(primaryHue, primarySat, primaryLum),\n        }}\n      ></div>\n      <PrimaryForm\n        primaryHue={primaryHue}\n        primarySat={primarySat}\n        primaryLum={primaryLum}\n        handleInputChange={handleInputChange}\n      />\n      <p>Positive Comp Color A: {getPositiveCompHue(primaryColor.h, 135)}</p>\n    </section>\n  );\n};\n\nexport default HarmonyGenerator;\n"]},"metadata":{},"sourceType":"module"}